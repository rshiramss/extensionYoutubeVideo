// Get current video information
function getCurrentVideoInfo() {
    const urlParams = new URLSearchParams(window.location.search);
    const videoId = urlParams.get('v');
    const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
    return { videoId, videoUrl };
}

// Create and inject the summary container
function createSummaryContainer() {
    console.log('Creating and injecting summary container');
    
    const container = document.createElement('div');
    container.className = 'yt-summary-container';
    
    // Detect YouTube theme
    function detectYouTubeDarkMode() {
        return document.documentElement.getAttribute('dark') === 'true' || 
               document.querySelector('html[dark]') !== null ||
               window.matchMedia('(prefers-color-scheme: dark)').matches;
    }
    
    const isDarkMode = detectYouTubeDarkMode();
    console.log('YouTube dark mode detected:', isDarkMode);
    
    // Apply theme-appropriate styles
    if (isDarkMode) {
        container.style.backgroundColor = '#212121';
        container.style.border = '1px solid #383838';
        container.style.color = '#fff';
    } else {
        container.style.backgroundColor = '#f9f9f9';
        container.style.border = '1px solid #e0e0e0';
        container.style.color = '#0f0f0f';
    }
    
    container.style.borderRadius = '8px';
    container.style.padding = '16px';
    container.style.margin = '0 0 16px 0';
    container.style.boxShadow = isDarkMode ? 
                            '0 1px 10px rgba(0, 0, 0, 0.3)' : 
                            '0 1px 4px rgba(0, 0, 0, 0.1)';
    container.style.width = '100%'; // Ensure full width
    container.style.display = 'block'; // Ensure it's visible
    
    const headerBorderColor = isDarkMode ? '#383838' : '#e5e5e5';
    const titleColor = isDarkMode ? '#fff' : '#0f0f0f';
    const loadingColor = isDarkMode ? '#aaa' : '#606060';
    
    // Set header colors based on dark mode
    const headerBorderColor = isDarkMode ? '#383838' : '#e5e5e5';
    const titleColor = isDarkMode ? '#fff' : '#0f0f0f';
    const loadingColor = isDarkMode ? '#aaa' : '#606060';
    
    container.innerHTML = `
        <div class="yt-summary-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; padding-bottom: 8px; border-bottom: 1px solid ${headerBorderColor};">
            <div class="yt-summary-title" style="font-size: 16px; font-weight: 500; color: ${titleColor};">Video Summary</div>
        </div>
        <div class="yt-summary-content">
            <div class="yt-summary-loading" style="text-align: center; padding: 20px; color: ${loadingColor};">
                <div style="margin-bottom: 10px; font-weight: bold;">Generating summary...</div>
                <div style="display: inline-block; width: 30px; height: 30px; border: 3px solid rgba(255,0,0,0.3); border-radius: 50%; border-top-color: #ff0000; animation: yt-summary-spin 1s ease-in-out infinite;"></div>
                <div style="margin-top: 10px; font-size: 12px;">This may take a moment as the server processes the video transcript.</div>
                <style>
                    @keyframes yt-summary-spin {
                        to { transform: rotate(360deg); }
                    }
                </style>
            </div>
        </div>
    `;
    
    // Try multiple insertion locations (YouTube's layout changes frequently)
    console.log('Looking for insertion point in YouTube DOM...');
    
    // First attempt: Try #above-the-fold
    const aboveTheFold = document.querySelector('#above-the-fold');
    
    // Second attempt: Try #meta
    const meta = document.querySelector('#meta');
    
    // Third attempt: Try #primary-inner
    const primaryInner = document.querySelector('#primary-inner');
    
    // Fourth attempt: Try #top-row
    const topRow = document.querySelector('#top-row');
    
    // Fifth attempt: Try #below 
    const below = document.querySelector('#below');
    
    // Sixth attempt: Try the comments section
    const comments = document.querySelector('#comments');
    
    // Last attempts: Try broader containers
    const primary = document.querySelector('#primary');
    const secondary = document.querySelector('#secondary');
    
    // Debug what elements we found
    console.log('DOM Elements found:', {
        aboveTheFold: !!aboveTheFold,
        meta: !!meta,
        primaryInner: !!primaryInner,
        topRow: !!topRow,
        below: !!below,
        comments: !!comments,
        primary: !!primary,
        secondary: !!secondary
    });
    
    // Place the container in the recommended videos section (to the side)
    if (secondary) {
        // For side placement, insert at the beginning of the secondary section
        secondary.insertBefore(container, secondary.firstChild);
        
        // Make it fit nicely in the secondary column
        container.style.width = '100%';
        container.style.margin = '0 0 16px 0'; // Remove top margin
        container.style.boxSizing = 'border-box';
        
        console.log('Summary container added to #secondary (side placement)');
    } 
    // Fallback options if we can't find the secondary section
    else if (comments) {
        comments.parentNode.insertBefore(container, comments);
        console.log('Summary container added before #comments');
    } else if (primaryInner) {
        primaryInner.appendChild(container);
        console.log('Summary container added to #primary-inner');
    } else if (primary) {
        primary.appendChild(container);
        console.log('Summary container added to #primary');
    } else if (meta) {
        meta.parentNode.insertBefore(container, meta.nextSibling);
        console.log('Summary container added after #meta');
    } else if (below) {
        below.insertBefore(container, below.firstChild);
        console.log('Summary container added to #below');
    } else if (topRow && topRow.nextSibling) {
        topRow.parentNode.insertBefore(container, topRow.nextSibling);
        console.log('Summary container added after #top-row');
    } else {
        // Last resort: Add to body with fixed positioning
        document.body.appendChild(container);
        
        // Apply fixed positioning as last resort
        container.style.position = 'fixed';
        container.style.top = '100px';
        container.style.right = '20px';
        container.style.width = '300px';
        container.style.zIndex = '9999';
        
        console.warn('Could not find ideal insertion point, used fixed positioning on body.');
    }
    
    return container;
}

// Parse timestamp string to seconds
function timestampToSeconds(timestamp) {
    const [minutes, seconds] = timestamp.split(':').map(Number);
    return minutes * 60 + seconds;
}

// Handle timestamp clicks
function handleTimestampClick(timestamp) {
    const seconds = timestampToSeconds(timestamp);
    const video = document.querySelector('video');
    if (video) {
        video.currentTime = seconds;
    }
}

// Format the summary points
function formatSummaryPoints(summary) {
    try {
        console.log('Raw summary text:', summary);
        
        // Check if summary is empty
        if (!summary || summary.trim() === '') {
            console.error('Summary is empty or blank');
            return `<div class="yt-summary-error">Error: Received empty summary</div>`;
        }
        
        const points = summary.split('\n').filter(line => line.trim());
        console.log('Parsed points:', points);
        
        if (points.length === 0) {
            console.error('No points parsed from summary');
            return `<div class="yt-summary-error">Error: No summary points found</div>`;
        }
        
        let formattedPoints = '';
        let matchFound = false;
        
        for (const point of points) {
            // Try multiple formats that might be returned by the server
            let match = point.match(/Timestamp: \[(\d{2}:\d{2})\] - Key Point: (.*)/);
            
            if (!match) {
                // Try alternative format: "00:27 - Key Point: ..."
                match = point.match(/^(\d{2}:\d{2}) - Key Point: (.*)/);
            }
            
            if (!match) {
                // Try another alternative format: "[00:27] - ..."
                match = point.match(/\[(\d{2}:\d{2})\] - (.*)/);
            }
            
            if (match) {
                matchFound = true;
                const [_, timestamp, text] = match;
                // Check if YouTube is in dark mode for styling
                const isDarkMode = document.documentElement.getAttribute('dark') === 'true' || 
                                  document.querySelector('html[dark]') !== null ||
                                  window.matchMedia('(prefers-color-scheme: dark)').matches;
                                  
                const pointBgColor = isDarkMode ? '#2d2d2d' : '#ffffff';
                const pointBorderColor = isDarkMode ? '#383838' : '#efefef';
                const pointTextColor = isDarkMode ? '#aaa' : '#606060';
                const timestampColor = isDarkMode ? '#3ea6ff' : '#065fd4';
                
                formattedPoints += `
                    <div class="yt-summary-point" style="background: ${pointBgColor}; border: 1px solid ${pointBorderColor};">
                        <span class="yt-summary-timestamp" data-timestamp="${timestamp}" 
                              style="color: ${timestampColor}; font-weight: 500; cursor: pointer; display: inline-block; margin-bottom: 6px;">
                            ${timestamp}
                        </span>
                        <div style="color: ${pointTextColor};">${text}</div>
                    </div>
                `;
            } else if (point.trim() !== '') {
                // For non-matching lines that aren't empty, show them as plain text
                formattedPoints += `<div class="yt-summary-point-raw">${point}</div>`;
            }
        }
        
        // If no matches were found, show the raw summary
        if (!matchFound) {
            console.warn('No timestamp formatting matches found in summary');
            formattedPoints = `
                <div class="yt-summary-error">No formatted points found. Raw summary:</div>
                <pre style="white-space: pre-wrap; background: #f5f5f5; padding: 10px; margin-top: 10px;">${summary}</pre>
            `;
        }
        
        return formattedPoints;
    } catch (error) {
        console.error('Error formatting summary points:', error);
        return `
            <div class="yt-summary-error">Error formatting summary: ${error.message}</div>
            <pre style="white-space: pre-wrap; background: #f5f5f5; padding: 10px; margin-top: 10px;">${summary}</pre>
        `;
    }
}

// Fetch and display summary
async function fetchAndDisplaySummary() {
    const { videoId, videoUrl } = getCurrentVideoInfo();
    
    if (!videoId) {
        console.error('No video ID found');
        return;
    }

    // Remove old summary if it exists
    const oldContainer = document.querySelector('.yt-summary-container');
    if (oldContainer) {
        oldContainer.remove();
    }

    // Create new container
    const container = createSummaryContainer();
    
    // Ensure we have a content div
    if (!container) {
        console.error('Failed to create container');
        return;
    }
    
    const contentDiv = container.querySelector('.yt-summary-content');
    if (!contentDiv) {
        console.error('Cannot find .yt-summary-content element in container');
        return;
    }
    
    try {
        console.log('Fetching summary for video:', videoId);
        
        // Define the server URL - could be moved to a config variable if needed
        const serverUrl = 'http://127.0.0.1:8000';
        
        // Test server connection first
        try {
            const testResponse = await fetch(`${serverUrl}/`);
            console.log('Server connection test:', testResponse.status);
        } catch (testError) {
            console.error('Server connection test failed:', testError.message);
            throw new Error('Cannot connect to summary server. Please make sure the server is running on port 8000.');
        }

        // Fetch summary from backend
        const response = await fetch(`${serverUrl}/summarize`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ videoId: videoId })
        });

        console.log('Response status:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('Server response error:', errorText);
            throw new Error(`Server error: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('Received summary data:', data);
        
        if (!data.summary) {
            throw new Error('No summary data received from server');
        }

        // Log the full summary to console for debugging
        console.log('%c Full Summary From Server:', 'background: #3f51b5; color: white; padding: 4px;');
        console.log(data.summary);
        
        if (data.debug_info) {
            console.log('Debug info:', data.debug_info);
        }
        
        console.log('Setting innerHTML with formatted summary points');
        
        // Format and show the points with debug
        const formattedHTML = formatSummaryPoints(data.summary);
        console.log('Formatted HTML:', formattedHTML.substring(0, 100) + '...');
        
        // Check if YouTube is in dark mode for styling
        const isDarkMode = document.documentElement.getAttribute('dark') === 'true' || 
                          document.querySelector('html[dark]') !== null ||
                          window.matchMedia('(prefers-color-scheme: dark)').matches;
        
        // Remove the raw summary for production use
        contentDiv.innerHTML = `
            <div style="margin-bottom: 20px;">
                ${formattedHTML}
            </div>
        `;
        
        // Force styles to be visible
        container.style.display = 'block';
        container.style.visibility = 'visible';
        contentDiv.style.display = 'block';
        contentDiv.style.visibility = 'visible';
        
        console.log('Summary content added to DOM');

        // Add click handlers for timestamps
        contentDiv.querySelectorAll('.yt-summary-timestamp').forEach(element => {
            element.addEventListener('click', () => {
                handleTimestampClick(element.dataset.timestamp);
            });
        });

    } catch (error) {
        console.error('Error in fetchAndDisplaySummary:', error);
        
        // Double-check that contentDiv exists before trying to access it
        if (contentDiv) {
            contentDiv.innerHTML = `
                <div class="yt-summary-error">
                    Error: ${error.message}
                    <br><br>
                    Please make sure:
                    <br>
                    1. The summary server is running (python server.py)
                    <br>
                    2. The server is using port 8000
                    <br>
                    3. The video has captions available
                    <br><br>
                    <button id="retry-summary" style="background: #065fd4; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Retry Summary</button>
                </div>
            `;
            
            // Add retry button functionality
            document.getElementById('retry-summary')?.addEventListener('click', () => {
                fetchAndDisplaySummary();
            });
        } else {
            console.error('Cannot display error message: contentDiv is null');
            // Try to add error message to the container itself if available
            if (container) {
                container.innerHTML = `
                    <div style="color: #cc0000; padding: 12px; background: #ffebee; border-radius: 4px; margin-top: 12px; font-weight: bold;">
                        Error loading summary. Please refresh the page and try again.
                        <br><br>
                        Detailed error: ${error.message}
                        <br><br>
                        <button style="background: #065fd4; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;" onclick="window.location.reload()">Refresh Page</button>
                    </div>
                `;
            }
            
            // Also add a floating notification as a fallback
            const notification = document.createElement('div');
            notification.style.position = 'fixed';
            notification.style.top = '10px';
            notification.style.right = '10px';
            notification.style.backgroundColor = '#ffebee';
            notification.style.color = '#cc0000';
            notification.style.padding = '10px';
            notification.style.borderRadius = '4px';
            notification.style.zIndex = '99999';
            notification.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
            notification.innerHTML = `YouTube Summary Error: ${error.message}`;
            document.body.appendChild(notification);
            
            // Remove notification after 10 seconds
            setTimeout(() => {
                notification.remove();
            }, 10000);
        }
    }
}

// Removed floating button functionality as we're integrating directly into the page

// Initialize when the page is ready
function initializeSummary() {
    if (window.location.href.includes('youtube.com/watch')) {
        console.log('Initializing summary for YouTube video');
        // Directly fetch and display summary without floating button
        fetchAndDisplaySummary();
    } else {
        console.log('Not on YouTube watch page, skipping summary');
    }
}

// Handle YouTube's SPA navigation
let lastUrl = location.href;
const observer = new MutationObserver(() => {
    if (location.href !== lastUrl) {
        lastUrl = location.href;
        console.log('YouTube navigation detected, URL changed');
        
        // Remove old summary if it exists
        const oldContainer = document.querySelector('.yt-summary-container');
        if (oldContainer) {
            oldContainer.remove();
        }
        
        // Only show summary on YouTube watch pages
        if (location.href.includes('youtube.com/watch')) {
            console.log('On YouTube watch page, fetching summary');
            fetchAndDisplaySummary();
        } else {
            console.log('Not on YouTube watch page, skipping summary');
        }
    }
});

// Start observing
observer.observe(document, { subtree: true, childList: true });

// Check if server is running
async function checkServerStatus() {
    try {
        const serverUrl = 'http://127.0.0.1:8000';
        const response = await fetch(`${serverUrl}/`);
        console.log('Server status check:', response.status);
        return response.ok;
    } catch (error) {
        console.error('Server status check failed:', error.message);
        return false;
    }
}

// Initialize on page load
console.log('YouTube Summary Extension loaded!');

// Check server status first and then initialize
checkServerStatus().then(isServerRunning => {
    if (isServerRunning) {
        console.log('Server is running, initializing extension');
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeSummary);
        } else {
            initializeSummary();
        }
    } else {
        console.warn('Server is not running, extension will not summarize videos');
        // Create a notification that the server is not running
        const notification = document.createElement('div');
        notification.style.position = 'fixed';
        notification.style.top = '10px';
        notification.style.right = '10px';
        notification.style.backgroundColor = '#ffebee';
        notification.style.color = '#cc0000';
        notification.style.padding = '10px';
        notification.style.borderRadius = '4px';
        notification.style.zIndex = '99999';
        notification.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
        notification.innerHTML = 'YouTube Summary: Server is not running. Please start the server.';
        document.body.appendChild(notification);
        
        // Remove notification after 10 seconds
        setTimeout(() => {
            notification.remove();
        }, 10000);
    }
});